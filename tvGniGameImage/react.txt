class R003_ImportConponent extends Component {
    render(){
        return(
            <h2>[This IS IMPORTED COMPONENT ]</h2>
        )
    }
}

export default R003_ImportConponent;

class R004_LifecycleEx extends Component{
    render(){
        console.log('3. render Call');
        return(
            <h2>[THIS IS RENDER FUNCTION] </h2>
        )
    }
}

export default R004_LifecycleEx

class R005_LifecycleEx extends Component{
    constructor(props){
        super(props);
        this.state={};
        console.log('1. constructor Call');
    }

    render(){
        console.log('3. render Call');
        return(
            <h2>[THIS IS RENDER FUNCTION] </h2>
        )
    }
}

export default R005_LifecycleEx;

class R006_LifecycleEx extends Component{
    static getDerivedStateFromProps(props, state){  
        console.log('2. getDerivedStateFromProps Call :'+props.prop_value);
        return {};
    }
    constructor(props){
        super(props);
        this.state={};
        console.log('1. constructor Call');
    }

    render(){
        console.log('3. render Call');
        return(
            <h2>[THIS IS RENDER FUNCTION] </h2>
        )
    }
}

export default R006_LifecycleEx

class R007_LifecycleEx extends Component{
    static getDerivedStateFromProps(props, state){  
        console.log('2. getDerivedStateFromProps Call :'+props.prop_value);
        return {tmp_state:props.prop_value};
    }
    constructor(props){
        super(props);
        this.state={};
        console.log('1. constructor Call');
    }

    componentDidMount(){
        console.log('4.ComponetDidMoint Call');
        console.log('5.tmp_state:'+this.state.tmp_state)
    }


    render(){
        console.log('3. render Call');
        return(
            <h2>[THIS IS RENDER FUNCTION] </h2>
        )
    }
}

export default R007_LifecycleEx;

class R008_LifecycleEx extends Component{
    static getDerivedStateFromProps(props, state){  
        console.log('2. getDerivedStateFromProps Call :'+props.prop_value);
        return {tmp_state:props.prop_value};
    }
    constructor(props){
        super(props);
        this.state={};
        console.log('1. constructor Call');
    }

    componentDidMount(){
        console.log('4. ComponetDidMoint Call');
        console.log('5. tmp_state:'+this.state.tmp_state);
        this.setState({tmp_state2: true});
    }

    shouldComponentUpdate(props,state){
        console.log('6. shouldComponentUpdate Call / tmp_state = '+state.tmp_state2);
        return state.tmp_state2

    }

    render(){
        console.log('3. render Call');
        return(
            <h2>[THIS IS shouldComponentUpdate] </h2>
        )
    }
}

export default R008_LifecycleEx;

class R009_Es6 extends Component{

    constructor(props){
        super(props);
        this.state={};
    }

    componentDidMount(){
        var jsString1= '자바스크립트'
        var jsString2= '입니다\n다음 줄입니다.'
        console.log(jsString1 +' 문자열'+jsString2+ '~');

        var Es6String1 = 'Es6'
        var Es6String2 = '입니다.'
        console.log('${Es6String1} 문자열 ${Es6String2}!!____다음 줄입니다.');

        var LongString = "ES6에 추가된 String 함수들입니다.";
        console.log('startsWith :' +LongString.startsWith("ES6에 추가"));
        console.log('endsWith :' +LongString.endsWith("함수들입니다."));
        console.log('includesWith :' +LongString.includes("추가된 String"));
    }
    render(){
        return(
            <h2>[THIS IS ES6 STRING</h2>
        )
    }
}
export default R009_Es6;


class R010_Variable extends Component{

    constructor(props){
        super(props);
        this.state={};
    }

    componentDidMount(){
        var varName = 'react';
        console.log('varName1 :' +varName);
        var varName = '200';
        console.log('varName2 :' +varName);

        let letName='react'
        console.log('letName1 : '+letName);
        letName='react200';
        console.log('letName2 : '+letName);

        const constName = 'react';
        console.log('constName :' + constName);
    }
    render(){
        return(
            <h2>[THIS IS Variable ]</h2>
        )
    }
}
export default R010_Variable;


class R011_SpreadOperator extends Component{
    constructor(props){
        super(props);
        this.state={};
    }

    componentDidMount(){
        //javascript Array
        var varArray1 = ['num1', 'num2'];
        var varArray2 = ['num3', 'num4'];
        var sumVarArr =[varArray1[0],varArray1[1],varArray2[0],varArray2[1]];
        console.log('1. sumVarArr : '+sumVarArr);
        //ES6 Array
        let sumLetArr =[...varArray1,...varArray2];
        console.log('2. sumLetArr : ' +sumLetArr);
        const [sum1, sum2, ...remain] = sumLetArr;
        console.log('3. sum1 : '+sum1 +',sum2 : '+sum2 +',remain : '+remain );
        
        var varObj1={key1 :'val1',key2 : 'val2'};
        var varObj2={key2 :'new2',key3 : 'val3'};
        //javascript object
        var sumVerObj=Object.assign({}, varObj1, varObj2);
        console.log('4. sumVerObj',+JSON.stringify(sumVerObj));
        //ES6 object
        var sumLetObj ={...varObj1,...varObj2};
        console.log('5. sumLetObj',+JSON.stringify(sumLetObj));
        const{key1,key3,...others}=sumLetObj;
        console.log('6. key1 :'+key1+'key3 :'+key3+',others :'+JSON.stringify(others));
    
    
    }
    render(){
        return(
            <h2>[THIS IS SpreadOperator ]</h2>
        )
    }
}

export default R011_SpreadOperator;


class ClassPrototype extends Component{

    constructor(props){
        super(props);
        this.state={};
    }

    componentDidMount(){
        //Es5 prototype
        var ExamCountFunc = (function () {
            function ExamCount(num) {
                this.number = num;
            }
            ExamCount.prototype.showNum = function(){
                console.log("1. react_"+this.number);
            };
            return ExamCount;
        }());

        var cnt =new ExamCountFunc('200');
        cnt.showNum();

        //es6 class
        class ExamCountClass{
            constructor(num2){
                this.number2=num2;
            }
            showNum(){
                console.log(`2. react_${this.number2}`);
            }
        }
        var cnt2 =new ExamCountClass("2hundred");
        cnt2.showNum();
    }
    render(){
        return(
            <h2>[THIS IS Class]</h2>
        )
    }
}

export default ClassPrototype;

class R013_ArrowFunction extends Component{
    constructor(props){
        super(props);
        this.state={
        arrowFuc: 'React200',
        num: 3
        };
    }

    componentDidMount(){
        Function1(1);
        this.Function2(1,1);
        this.Function3(1,3);
        this.Function4();
        this.Function5(0,2,3);

        function Function1(num1){
            return console.log(num1+ '.Es5 function');
        }
    }
    Function2 = (num1,num2)=>{
        let num3=num2+num1;
        console.log(num3+'.Arrow Function :' + this.state.arrowFuc);
    }
    Function3(){
        var this_bind=this;
        setTimeout(function(){
            console.log(this_bind.state.num+'. Es5 Callback Function noBind : ');
            console.log(this_bind.state.arrowFuc);
        },100);
    }
    Function4(){
        setTimeout(function() {
            console.log('4.Es5 Callback Function Bind : '+ this.state.arrowFuc);
        }.bind(this),100);
    }
    Function5 = (num1,num2,num3) =>{
        const num4 = num1+num2+num3;
        setTimeout(()=> {
            console.log(num4+'. Arrow Callback Function : '+this.state.arrowFuc);
        },100);
    }
    render(){
        return(
            <h2>[THIS IS arrowFunction]</h2>
        )
    }
}

export default R013_ArrowFunction;
